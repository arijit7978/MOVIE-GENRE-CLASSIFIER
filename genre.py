# -*- coding: utf-8 -*-
"""Genre.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OV7SJ7ZI5kVGDdM5M5HNM8LD8QFKTeOh

# Movie Genre Predictor
"""

# Commented out IPython magic to ensure Python compatibility.
# Importing essential libraries
import numpy as np
import pandas as pd
# Importing essential libraries for visualization
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

df = pd.read_csv('/content/kaggle_movie_train.csv')

"""#### Exploring the dataset"""

df.columns

df.shape

df.info()

df.head(10)

movie_genre = list(df['genre'].unique())
movie_genre.sort()
movie_genre

"""#### Genre Count Visualization"""

plt.figure(figsize=(10,7))
sns.countplot(x='genre', data=df,palette='rainbow',edgecolor=(0,0,0))
plt.xlabel('Movie Genres')
plt.ylabel('Count')
plt.title('Visualize the Genre Count')
plt.show()

genre_mapper = {'other': 0, 'action': 1, 'adventure': 2, 'comedy':3, 'drama':4, 'horror':5, 'romance':6, 'sci-fi':7, 'thriller': 8}
df['genre'] = df['genre'].map(genre_mapper)
# df.head(10)

"""###### Finding NaN values"""

df.isna().any()

# Removing the 'id' column
df.drop('id', axis=1, inplace=True)
df.columns

"""##### Importing essential libraries for performing Natural Language Processing"""

import nltk
import re
nltk.download('stopwords')
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer

df.shape

"""#### Data Preprocessing"""

# Cleaning the text
corpus = []
ps = PorterStemmer()

for i in range(0, df.shape[0]):
  dialog = re.sub(pattern='[^a-zA-Z]', repl=' ', string=df['text'][i])
  dialog = dialog.lower()
  words = dialog.split()
  dialog_words = [word for word in words if word not in set(stopwords.words('english'))]
  words = [ps.stem(word) for word in dialog_words]
  dialog = ' '.join(words)
  corpus.append(dialog)

corpus[0:10]

len(corpus)

other_words = []
for i in list(df[df['genre']==0].index):
  other_words.append(corpus[i])

action_words = []
for i in list(df[df['genre']==1].index):
  action_words.append(corpus[i])

adventure_words = []
for i in list(df[df['genre']==2].index):
  adventure_words.append(corpus[i])

comedy_words = []
for i in list(df[df['genre']==3].index):
  comedy_words.append(corpus[i])

drama_words = []
for i in list(df[df['genre']==4].index):
  drama_words.append(corpus[i])

horror_words = []
for i in list(df[df['genre']==5].index):
  horror_words.append(corpus[i])

romance_words = []
for i in list(df[df['genre']==6].index):
  romance_words.append(corpus[i])

thriller_words = []
for i in list(df[df['genre']==8].index):
  thriller_words.append(corpus[i])

other=''
adventure=''
romance=''
drama = ''
horror=''
thriller=''
action = ''
comedy = ''

for i in range(0, 3):
  other += other_words[i]
  drama += drama_words[i]
  action += action_words[i]
  horror += horror_words[i]  
  comedy += comedy_words[i]
  thriller += thriller_words[i]
  adventure += adventure_words[i]
  romance += romance_words[i]

"""#### Wordcloud Representation"""

# Creating wordcloud for drama genre
from wordcloud import WordCloud
wordcloud1 = WordCloud(background_color='white', width=3000, height=2500).generate(drama)
plt.figure(figsize=(8,8))
plt.imshow(wordcloud1)
plt.axis('off')
plt.title("Words which indicate 'DRAMA' genre ")
plt.show()

# Creating wordcloud for other genre
from wordcloud import WordCloud
wordcloud1 = WordCloud(background_color='white', width=3000, height=2500).generate(other)
plt.figure(figsize=(8,8))
plt.imshow(wordcloud1)
plt.axis('off')
plt.title("Words which indicate 'OTHER' genre ")
plt.show()

# Creating wordcloud for horror genre
from wordcloud import WordCloud
wordcloud1 = WordCloud(background_color='white', width=3000, height=2500).generate(horror)
plt.figure(figsize=(8,8))
plt.imshow(wordcloud1)
plt.axis('off')
plt.title("Words which indicate 'HORROR' genre ")
plt.show()

# Creating wordcloud for action genre
wordcloud2 = WordCloud(background_color='white', width=3000, height=2500).generate(action)
plt.figure(figsize=(8,8))
plt.imshow(wordcloud2)
plt.axis('off')
plt.title("Words which indicate 'ACTION' genre ")
plt.show()

# Creating wordcloud for romance genre
from wordcloud import WordCloud
wordcloud1 = WordCloud(background_color='white', width=3000, height=2500).generate(romance)
plt.figure(figsize=(8,8))
plt.imshow(wordcloud1)
plt.axis('off')
plt.title("Words which indicate 'ROMANCE' genre ")
plt.show()

# Creating wordcloud for comedy genre
wordcloud3 = WordCloud(background_color='white', width=3000, height=2500).generate(comedy)
plt.figure(figsize=(8,8))
plt.imshow(wordcloud3)
plt.axis('off')
plt.title("Words which indicate 'COMEDY' genre ")
plt.show()

# Creating wordcloud for thriller genre
from wordcloud import WordCloud
wordcloud1 = WordCloud(background_color='white', width=3000, height=2500).generate(thriller)
plt.figure(figsize=(8,8))
plt.imshow(wordcloud1)
plt.axis('off')
plt.title("Words which indicate 'THRILLER' genre ")
plt.show()

# Creating wordcloud for adventure genre
from wordcloud import WordCloud
wordcloud1 = WordCloud(background_color='white', width=3000, height=2500).generate(adventure)
plt.figure(figsize=(8,8))
plt.imshow(wordcloud1)
plt.axis('off')
plt.title("Words which indicate 'ADVENTURE' genre ")
plt.show()

"""### Bag Of Words Model"""

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features=10000, ngram_range=(1,2))

X = cv.fit_transform(corpus).toarray()
xx = cv.fit_transform(corpus)

print(xx[0])

y = df['genre'].values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=0)
print('X_train size: {}, X_test size: {}'.format(X_train.shape, X_test.shape))

"""### Multinomial Naive Bayes"""

from sklearn.naive_bayes import MultinomialNB
nb_classifier = MultinomialNB()
nb_classifier.fit(X_train, y_train)

# Predicting the Test set results
y_pred = nb_classifier.predict(X_test)

"""##### Accuracy"""

# Calculating Accuracy
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
score1 = accuracy_score(y_test, y_pred)
print("Accuracy : {}%".format(round(score1*100,2)))
cm = confusion_matrix(y_test, y_pred)

"""#### Confusion Matrix Plot"""

plt.figure(figsize=(15,12))
axis_labels = ['Other', 'Action', 'Adventure', 'Comedy', 'Drama', 'Horror', 'Romance', 'Sci-Fi', 'Thriller']
sns.heatmap(data=cm, annot=True, cmap='hot', xticklabels=axis_labels, yticklabels=axis_labels,cbar=False)
plt.xlabel('Predicted values')
plt.ylabel('Actual values')
plt.title('Confusion Matrix')
plt.show()

"""#### Hyperparameter tuning"""

accuracy = 0.0
alpha_val = 0.0
for i in np.arange(0.1,0.5,0.1):
  classifier = MultinomialNB(alpha=i)
  classifier.fit(X_train, y_train)
  temp_y_pred = classifier.predict(X_test)
  score = accuracy_score(y_test, temp_y_pred)
  print("Accuracy alpha={} {}%".format(round(i,1), round(score*100,2)))
  if score>accuracy:
    accuracy = score
    alpha_val = i
print('The best accuracy is {}% with alpha value as {}'.format(round(accuracy*100, 2), round(alpha_val,1)))

"""#### Function for Genre Prediction"""

def genre_prediction(sample_script):
  sample_script = re.sub(pattern='[^a-zA-Z]',repl=' ', string=sample_script)
  sample_script = sample_script.lower()
  sample_script_words = sample_script.split()
  sample_script_words = [word for word in sample_script_words if not word in set(stopwords.words('english'))]
  ps = PorterStemmer()
  final_script = [ps.stem(word) for word in sample_script_words]
  final_script = ' '.join(final_script)

  temp = cv.transform([final_script]).toarray()
  classifier = MultinomialNB(alpha=0.1)
  classifier.fit(X_train, y_train)
  return classifier.predict(temp)[0]

summary = "In 1947 Portland, Maine, banker Andy Dufresne is convicted of murdering his wife and her lover and is sentenced to two consecutive life sentences at the Shawshank State Penitentiary. He is befriended by Ellis Red Redding, an inmate and prison contraband smuggler serving a life sentence. Red procures a rock hammer and a large poster of Rita Hayworth for Andy. Assigned to work in the prison laundry, Andy is frequently sexually assaulted by the Sisters and their leader, Bogs.In 1949, Andy overhears the captain of the guards, Byron Hadley, complaining about being taxed on an inheritance and offers to help him shelter the money legally. After an assault by the Sisters nearly kills Andy, Hadley beats and cripples Bogs, who is subsequently transferred to another prison. Andy is not attacked again. Warden Samuel Norton meets Andy and reassigns him to the prison library to assist elderly inmate Brooks Hatlen, a front to allow Andy to manage financial matters for other prison staff, guards from other prisons, and the warden himself. Andy begins writing weekly letters to the state legislature requesting funds to improve the prison's decaying library.Brooks is paroled in 1954 after serving 50 years, but he cannot adjust to the outside world and eventually hangs himself. The legislature sends a library donation that includes a recording of The Marriage of Figaro; Andy plays an excerpt over the public address system and is punished with solitary confinement. After his release from solitary, Andy explains that hope is what gets him through his time, a concept that Red dismisses. In 1963, Norton begins exploiting prison labor for public works, profiting by undercutting skilled labor costs and receiving bribes. Andy launders the money using the alias Randall Stephens."

map_genre = {0:'other', 1:'action', 2: 'adventure', 3:'comedy', 4: 'drama', 5: 'horror', 6: 'romance', 7: 'sci-fi', 8:'thriller'}
map_genre[genre_prediction(summary)]